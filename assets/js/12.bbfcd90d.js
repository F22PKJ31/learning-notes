(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{362:function(t,e,n){"use strict";n.r(e);var a=n(42),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"雪花算法-snowflake-java-实现-简书"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#雪花算法-snowflake-java-实现-简书"}},[t._v("#")]),t._v(" 雪花算法（SnowFlake）Java 实现 - 简书")]),t._v(" "),n("blockquote",[n("p",[t._v("本文由 "),n("a",{attrs:{href:"http://ksria.com/simpread/",target:"_blank",rel:"noopener noreferrer"}},[t._v("简悦 SimpRead"),n("OutboundLink")],1),t._v(" 转码， 原文地址 "),n("a",{attrs:{href:"https://www.jianshu.com/p/2a27fbd9e71a",target:"_blank",rel:"noopener noreferrer"}},[t._v("www.jianshu.com"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("分布式 id 生成算法的有很多种，Twitter 的 SnowFlake 就是其中经典的一种。")])]),t._v(" "),n("h2",{attrs:{id:"算法原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法原理"}},[t._v("#")]),t._v(" 算法原理")]),t._v(" "),n("p",[t._v("SnowFlake 算法生成 id 的结果是一个 64bit 大小的整数，它的结构如下图：")]),t._v(" "),n("p",[n("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/13382703-b64e38457ddd13e2.jpg",alt:""}}),t._v(" 结构图")]),t._v(" "),n("ol",[n("li",[n("strong",[t._v("1bit")]),t._v("，不用，因为二进制中最高位是符号位，1 表示负数，0 表示正数。生成的 id 一般都是用整数，所以最高位固定为 0。")]),t._v(" "),n("li",[n("strong",[t._v("41bit - 时间戳")]),t._v("，用来记录时间戳，毫秒级。\n"),n("ul",[n("li",[t._v("41 位可以表示"),n("img",{attrs:{src:"https://math.jianshu.com/math?formula=2%5E%7B41%7D-1",alt:""}}),t._v("个数字，")]),t._v(" "),n("li",[t._v("如果只用来表示正整数（计算机中正数包含 0），可以表示的数值范围是：0 至 "),n("img",{attrs:{src:"https://math.jianshu.com/math?formula=2%5E%7B41%7D-1",alt:""}}),t._v("，减 1 是因为可表示的数值范围是从 0 开始算的，而不是 1。")]),t._v(" "),n("li",[t._v("也就是说 41 位可以表示"),n("img",{attrs:{src:"https://math.jianshu.com/math?formula=2%5E%7B41%7D-1",alt:""}}),t._v("个毫秒的值，转化成单位年则是![]("),n("a",{attrs:{href:"https://math.jianshu.com/math?formula=%282%5E%7B41%7D-1%29%20%2F%20%281000%20*%2060%20*%2060%20*%2024%20*365%29%20%3D%2069%29%E5%B9%B4",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://math.jianshu.com/math?formula=(2%5E%7B41%7D-1) %2F (1000 * 60 * 60 * 24 *365) %3D 69)年"),n("OutboundLink")],1)])])]),t._v(" "),n("li",[n("strong",[t._v("10bit - 工作机器 id")]),t._v("，用来记录工作机器 id。\n"),n("ul",[n("li",[t._v("可以部署在"),n("img",{attrs:{src:"https://math.jianshu.com/math?formula=2%5E%7B10%7D%20%3D%201024",alt:""}}),t._v("个节点，包括 5 位 datacenterId 和 5 位 workerId")]),t._v(" "),n("li",[t._v("5 位（bit）可以表示的最大正整数是"),n("img",{attrs:{src:"https://math.jianshu.com/math?formula=2%5E%7B5%7D-1%20%3D%2031",alt:""}}),t._v("，即可以用 0、1、2、3、....31 这 32 个数字，来表示不同的 datecenterId 或 workerId")])])]),t._v(" "),n("li",[n("strong",[t._v("12bit - 序列号")]),t._v("，序列号，用来记录同毫秒内产生的不同 id。\n"),n("ul",[n("li",[t._v("12 位（bit）可以表示的最大正整数是"),n("img",{attrs:{src:"https://math.jianshu.com/math?formula=2%5E%7B12%7D-1%20%3D%204095",alt:""}}),t._v("，即可以用 0、1、2、3、....4094 这 4095 个数字，来表示同一机器同一时间截（毫秒) 内产生的 4095 个 ID 序号。")])])])]),t._v(" "),n("p",[t._v("由于在 Java 中 64bit 的整数是 long 类型，所以在 Java 中 SnowFlake 算法生成的 id 就是 long 来存储的。")]),t._v(" "),n("p",[n("strong",[t._v("SnowFlake 可以保证：")])]),t._v(" "),n("blockquote",[n("ol",[n("li",[t._v("所有生成的 id 按时间趋势递增")]),t._v(" "),n("li",[t._v("整个分布式系统内不会产生重复 id（因为有 datacenterId 和 workerId 来做区分）")])])]),t._v(" "),n("h2",{attrs:{id:"算法实现-java"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法实现-java"}},[t._v("#")]),t._v(" 算法实现（Java）")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ftwitter-archive%2Fsnowflake%2Fblob%2Fsnowflake-2010%2Fsrc%2Fmain%2Fscala%2Fcom%2Ftwitter%2Fservice%2Fsnowflake%2FIdWorker.scala",target:"_blank",rel:"noopener noreferrer"}},[t._v("Twitter 官方给出的算法实现"),n("OutboundLink")],1),t._v(" 是用 Scala 写的，这里不做分析，可自行查看。")]),t._v(" "),n("p",[t._v("Java 版算法实现："),n("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011282426",target:"_blank",rel:"noopener noreferrer"}},[t._v("搬运自煲煲菜的博客"),n("OutboundLink")],1)]),t._v(" "),n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class IdWorker{\n\n    //下面两个每个5位，加起来就是10位的工作机器id\n    private long workerId;    //工作id\n    private long datacenterId;   //数据id\n    //12位的序列号\n    private long sequence;\n\n    public IdWorker(long workerId, long datacenterId, long sequence){\n        // sanity check for workerId\n        if (workerId > maxWorkerId || workerId < 0) {\n            throw new IllegalArgumentException(String.format("worker Id can\'t be greater than %d or less than 0",maxWorkerId));\n        }\n        if (datacenterId > maxDatacenterId || datacenterId < 0) {\n            throw new IllegalArgumentException(String.format("datacenter Id can\'t be greater than %d or less than 0",maxDatacenterId));\n        }\n        System.out.printf("worker starting. timestamp left shift %d, datacenter id bits %d, worker id bits %d, sequence bits %d, workerid %d",\n                timestampLeftShift, datacenterIdBits, workerIdBits, sequenceBits, workerId);\n\n        this.workerId = workerId;\n        this.datacenterId = datacenterId;\n        this.sequence = sequence;\n    }\n\n    //初始时间戳\n    private long twepoch = 1288834974657L;\n\n    //长度为5位\n    private long workerIdBits = 5L;\n    private long datacenterIdBits = 5L;\n    //最大值\n    private long maxWorkerId = -1L ^ (-1L << workerIdBits);\n    private long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);\n    //序列号id长度\n    private long sequenceBits = 12L;\n    //序列号最大值\n    private long sequenceMask = -1L ^ (-1L << sequenceBits);\n\n    //工作id需要左移的位数，12位\n    private long workerIdShift = sequenceBits;\n   //数据id需要左移位数 12+5=17位\n    private long datacenterIdShift = sequenceBits + workerIdBits;\n    //时间戳需要左移位数 12+5+5=22位\n    private long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;\n\n    //上次时间戳，初始值为负数\n    private long lastTimestamp = -1L;\n\n    public long getWorkerId(){\n        return workerId;\n    }\n\n    public long getDatacenterId(){\n        return datacenterId;\n    }\n\n    public long getTimestamp(){\n        return System.currentTimeMillis();\n    }\n\n     //下一个ID生成算法\n    public synchronized long nextId() {\n        long timestamp = timeGen();\n\n        //获取当前时间戳如果小于上次时间戳，则表示时间戳获取出现异常\n        if (timestamp < lastTimestamp) {\n            System.err.printf("clock is moving backwards.  Rejecting requests until %d.", lastTimestamp);\n            throw new RuntimeException(String.format("Clock moved backwards.  Refusing to generate id for %d milliseconds",\n                    lastTimestamp - timestamp));\n        }\n\n        //获取当前时间戳如果等于上次时间戳（同一毫秒内），则在序列号加一；否则序列号赋值为0，从0开始。\n        if (lastTimestamp == timestamp) {\n            sequence = (sequence + 1) & sequenceMask;\n            if (sequence == 0) {\n                timestamp = tilNextMillis(lastTimestamp);\n            }\n        } else {\n            sequence = 0;\n        }\n\n        //将上次时间戳值刷新\n        lastTimestamp = timestamp;\n\n        /**\n          * 返回结果：\n          * (timestamp - twepoch) << timestampLeftShift) 表示将时间戳减去初始时间戳，再左移相应位数\n          * (datacenterId << datacenterIdShift) 表示将数据id左移相应位数\n          * (workerId << workerIdShift) 表示将工作id左移相应位数\n          * | 是按位或运算符，例如：x | y，只有当x，y都为0的时候结果才为0，其它情况结果都为1。\n          * 因为个部分只有相应位上的值有意义，其它位上都是0，所以将各部分的值进行 | 运算就能得到最终拼接好的id\n        */\n        return ((timestamp - twepoch) << timestampLeftShift) |\n                (datacenterId << datacenterIdShift) |\n                (workerId << workerIdShift) |\n                sequence;\n    }\n\n    //获取时间戳，并与上次时间戳比较\n    private long tilNextMillis(long lastTimestamp) {\n        long timestamp = timeGen();\n        while (timestamp <= lastTimestamp) {\n            timestamp = timeGen();\n        }\n        return timestamp;\n    }\n\n    //获取系统时间戳\n    private long timeGen(){\n        return System.currentTimeMillis();\n    }\n\n    //---------------测试---------------\n    public static void main(String[] args) {\n        IdWorker worker = new IdWorker(1,1,1);\n        for (int i = 0; i < 30; i++) {\n            System.out.println(worker.nextId());\n        }\n    }\n\n}\n')])])]),n("p",[t._v("算法中大量使用位运算，这里不对位运算做过多解释，代码的详细解释参考"),n("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011282426",target:"_blank",rel:"noopener noreferrer"}},[t._v("煲煲菜的博客"),n("OutboundLink")],1)]),t._v(" "),n("blockquote",[n("p",[t._v("文章主要摘抄自"),n("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011282426",target:"_blank",rel:"noopener noreferrer"}},[t._v("煲煲菜的博客"),n("OutboundLink")],1),n("br"),t._v("\n如有侵权之处请留言告知，会立即删除。")])])])}),[],!1,null,null,null);e.default=r.exports}}]);